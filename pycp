#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Trying to have a progress bar while copying stuff

Main idea : forking `cp` in background, 
read size of source, and read size of
destination while copying.
"""

import subprocess
import sys
import os
import time

try:
    import progressbar 
except ImportError:
    print "Error: Unable to find progressbar module, aborting."
    exit(1)


class CopyManager:
    """
    Class that manages cp process
    """
    def __init__(self, source, destination):
        self.cp_process = None
        self.source = source
        self.destination = destination
        self.pbar = progressbar.ProgressBar()

    def copy(self):
        "Main method of CopyManager"
        self.cp_process = subprocess.Popen(["cp",
            self.source,
            self.destination],
            stdout=subprocess.PIPE)
        print self.source + " -> " + self.destination
        self.monitor_copy()

    def monitor_copy(self):
        "Executed during copy to print progressbar"

        while (self.cp_process.poll() is None):
            source_size = float(os.path.getsize(self.source))
            dest_size = float(os.path.getsize(self.destination))
            time.sleep(1)
            self.pbar.update( (dest_size / source_size) * 100 )

        self.pbar.finish()
        exit (self.cp_process.returncode)

def usage():
    "Ouputs short usage message"
    print """
    Usage: cp.py <source> <destination> 
    """
    
def main():
    "main"
    source = ""
    destination = ""
    try:
        source = sys.argv[1]
        destination = sys.argv[2]
    except IndexError:
        print "Wrong number of arguments!"
        usage()
        exit(1)
    
    if not (os.path.exists(source)):
        print ("Error: file '" + source + "' does not exist, aborting")
        exit(1)


    copy_manager = CopyManager(source, destination)
    try:
        copy_manager.copy()
    except KeyboardInterrupt:
        exit(1)

if __name__ == "__main__" :
    main()

